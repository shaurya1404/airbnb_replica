<% layout("/layouts/boilerplate") %>
<body> <!-- "novalidate" to remove default browser validation message. needs-validation to apply "script.js" class to this form-->
    <form method="POST" action="/listings" novalidate class="needs-validation" enctype="multipart/form-data"> <!--changing encoding type to "mulitpart/form-data" allows HTML to accept fies and -->
        <div class="row-2"> <!--To make all form components occupy 1 row and 12 columns-->
            <div class="col-6 offset-3">
                <h3 class="mt-3 mb-3">Create a New Listing</h3>
                <div class="mb-3"> <!--Adding margin-bottom between divs-->
                    <label for="title" class="form-label">Title</label> <!--Using Bootsrap "form control" styling-->
                    <input name="listing[title]" class="form-control" placeholder="Enter Title" required> <!--implementing "required" displays different default message set by different browser. thus, to maintain uniformity, using bootstrap instead of browser required-->
                    <div class="invalid-feedback">Please enter a valid title!</div> <!-- adding div w/ "invalid-feedback" class to display custom message from bootsrap styling-->
                    <div class="valid-feedback">Looks Good!</div> <!-- adding div w/ "valid-feedback" class to display custom message from bootsrap styling-->
                </div>                                                                                    
                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <textarea name="listing[description]" class="form-control" placeholder="Enter Description" required></textarea>
                    <div class="invalid-feedback">Please enter a short description!</div>
                    <div class="valid-feedback">Looks Good!</div>
                </div>
                <div class="mb-3"> 
                    <label for="image" class="form-label">Upload Image</label>
                    <input name="listing[image]" class="form-control" type="file" required> <!--type = file to accept image as input-->
                    <div class="valid-feedback">Looks Good!</div>
                </div>
                <div class="row"> <!--To adjust price and location divs in the same row-->
                    <div class="mb-3 col-md-6"> <!--md such that price and location adjust into seperate rows for size of screen less than medium-->
                        <label for="price" class="form-label">Price</label>
                        <input name="listing[price]" class="form-control" placeholder="Enter Price" required>
                        <div class="invalid-feedback">Please enter a valid price!</div>
                        <div class="valid-feedback">Looks Good!</div>
                    </div>
                    <div class="mb-3 col-md-6">
                        <label for="location" class="form-label">Location</label>
                        <input name="listing[location]" class="form-control" placeholder="Enter Location" required>
                        <div class="invalid-feedback">Please enter a valid location!</div>
                        <div class="valid-feedback">Looks Good!</div>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="country" class="form-label">Country</label>
                    <input name="listing[country]" class="form-control" placeholder="Enter Country" required>
                    <div class="invalid-feedback">Please enter a valid country name!</div>
                    <div class="valid-feedback">Looks Good!</div>
                </div>
                <button class="btn btn-dark mb-3 add-btn">Create!</button>
            </div>
        </div>
    </form>
</body>

<!-- Form validations are of 2 types: client-side validation and server-side validation-->
<!-- client side validation implemented in the form above using script.js, where required data has to be passed -->
<!-- however, server is still vulnerable as one can still pass data directly in url instead of form which will lead to error in database validations-->
<!-- hence, server-side validation also required which will be async as error will come from db-->
<!-- thus, adding middleware and try-catch blocks in app.js to deal w/ async mongoose errors->